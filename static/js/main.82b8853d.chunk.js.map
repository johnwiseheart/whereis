{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","App.module.scss"],"names":["ReactGA","initialize","App","state","device","undefined","_this2","this","pageview","window","location","pathname","fetch","then","resp","json","devices","order","sort","a","b","indexOf","name","getBestDevice","setState","overlay","react_default","createElement","App_Overlay","_device$coordinates","coordinates","latitude","longitude","Fragment","esm","width","height","zoom","mapStyle","mapboxApiAccessToken","React","PureComponent","Overlay","_ref2","timezone","city","weather","timeString","Date","toLocaleString","timeZone","time","className","styles","wrapper","separator","toLocaleTimeString","hour","minute","toLocaleDateString","weekday","year","month","day","Math","round","currently","summary","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","App-logo-spin"],"mappings":"4RAMAA,IAAQC,WAAW,kBAEZ,IAyBDC,6MACGC,MAAmB,CACxBC,YAAQC,uFAGW,IAAAC,EAAAC,KACnBP,IAAQQ,SAASC,OAAOC,SAASC,UACjCC,MA7BuB,sDA8BpBC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAO,OA3BU,SAACA,GAC5B,IAAMC,EAAQ,CAAC,SAAU,cAAe,QAExC,OAAOD,EAAQE,KAAK,SAACC,EAAGC,GACtB,OAAIH,EAAMI,QAAQF,EAAEG,MAAQL,EAAMI,QAAQD,EAAEE,MACnC,EAELL,EAAMI,QAAQF,EAAEG,MAAQL,EAAMI,QAAQD,EAAEE,OAClC,EAEH,IACN,GAgBkBC,CAAcP,KAC9BH,KAAK,SAAAT,GAAM,OAAIE,EAAKkB,SAAS,CAAEpB,8CAG3B,IACCA,EAAWG,KAAKJ,MAAhBC,OAER,QAAeC,IAAXD,EACF,OAAO,KAGT,IAAMqB,OAAqBpB,IAAXD,EAAuBsB,EAAAP,EAAAQ,cAACC,EAAYxB,GAAa,KAP1DyB,EASyBzB,EAAO0B,YAA/BC,EATDF,EASCE,SAAUC,EATXH,EASWG,UAClB,OACEN,EAAAP,EAAAQ,cAAAD,EAAAP,EAAAc,SAAA,KACGR,EACDC,EAAAP,EAAAQ,cAACO,EAAA,EAAD,CACEC,MAAM,OACNC,OAAO,OACPL,SAAUA,EACVC,UAAWA,EACXK,KAAM,EACNC,SAAS,oDACTC,qBAzDR,sGAwBgBC,IAAMC,eAwClBC,EAAsC,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,KAAMC,EAAcH,EAAdG,QACvDC,GAAa,IAAIC,MAAOC,eAAe,QAAS,CACpDC,SAAUN,IAENO,EAAO,IAAIH,KAAKD,GAEtB,OACErB,EAAAP,EAAAQ,cAAA,OAAKyB,UAAWC,IAAOC,SACrB5B,EAAAP,EAAAQ,cAAA,OAAKyB,UAAWC,IAAO5B,SACrBC,EAAAP,EAAAQ,cAAA,cAASkB,GACTnB,EAAAP,EAAAQ,cAAA,OAAKyB,UAAWC,IAAOE,YACvB7B,EAAAP,EAAAQ,cAAA,YACED,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,yBACAD,EAAAP,EAAAQ,cAAA,WACGwB,EAAKK,wBAAmBnD,EAAW,CAClCoD,KAAM,UACNC,OAAQ,YACN,KAENhC,EAAAP,EAAAQ,cAAA,WACGwB,EAAKQ,wBAAmBtD,EAAW,CAClCuD,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,cAIXrC,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,sBACAD,EAAAP,EAAAQ,cAAA,WAAMqC,KAAKC,MAAMnB,EAAQoB,WAAzB,QACAxC,EAAAP,EAAAQ,cAAA,WAAMmB,EAAQqB,cAQXjE,ICrGKkE,QACW,cAA7B3D,OAAOC,SAAS2D,UAEe,UAA7B5D,OAAOC,SAAS2D,UAEhB5D,OAAOC,SAAS2D,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAP,EAAAQ,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC,kCE1InBC,EAAAC,QAAA,CAAkB5B,QAAA,qBAAA7B,QAAA,qBAAA8B,UAAA,uBAAA4B,gBAAA","file":"static/js/main.82b8853d.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./App.module.scss\";\nimport { StaticMap } from \"react-map-gl\";\nimport { ICombinedDevice } from \"whereis-common\";\nimport ReactGA from \"react-ga\";\n\nReactGA.initialize(\"UA-139517135-2\");\n\nexport const MAPBOX_TOKEN =\n  \"pk.eyJ1IjoieW91cmFybSIsImEiOiJjamFoNWM3bXQxbHBuMzJvaTMydTJ3ODI3In0.XCIuLDNhGrDpAlKIQRMYjg\";\n\nexport const BACKEND_URL = \"https://serverless.jcaw.me/whereis/getLocationInfo\";\n\nexport const fetchData = async () => {};\n\nexport const getBestDevice = (devices: ICombinedDevice[]) => {\n  const order = [\"iPhone\", \"MacBook Pro\", \"iPad\"];\n\n  return devices.sort((a, b) => {\n    if (order.indexOf(a.name) > order.indexOf(b.name)) {\n      return 1;\n    }\n    if (order.indexOf(a.name) < order.indexOf(b.name)) {\n      return -1;\n    }\n    return 0;\n  })[0];\n};\n\ninterface IAppState {\n  device: ICombinedDevice | undefined;\n}\n\nclass App extends React.PureComponent<{}, IAppState> {\n  public state: IAppState = {\n    device: undefined\n  };\n\n  componentWillMount() {\n    ReactGA.pageview(window.location.pathname);\n    fetch(BACKEND_URL)\n      .then(resp => resp.json())\n      .then(devices => getBestDevice(devices))\n      .then(device => this.setState({ device }));\n  }\n\n  render() {\n    const { device } = this.state;\n\n    if (device === undefined) {\n      return null;\n    }\n\n    const overlay = device !== undefined ? <Overlay {...device} /> : null;\n\n    const { latitude, longitude } = device.coordinates;\n    return (\n      <>\n        {overlay}\n        <StaticMap\n          width=\"100%\"\n          height=\"100%\"\n          latitude={latitude}\n          longitude={longitude}\n          zoom={9}\n          mapStyle=\"mapbox://styles/yourarm/cizgnx6xj008q2roia5fiwne7\"\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n      </>\n    );\n  }\n}\n\nconst Overlay: React.SFC<ICombinedDevice> = ({ timezone, city, weather }) => {\n  const timeString = new Date().toLocaleString(\"en-US\", {\n    timeZone: timezone\n  });\n  const time = new Date(timeString);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.overlay}>\n        <header>{city}</header>\n        <div className={styles.separator} />\n        <main>\n          <div>\n            <div>Local time</div>\n            <div>\n              {time.toLocaleTimeString(undefined, {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n              })}{\" \"}\n            </div>\n            <div>\n              {time.toLocaleDateString(undefined, {\n                weekday: \"long\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\"\n              })}\n            </div>\n          </div>\n          <div>\n            <div>Weather</div>\n            <div>{Math.round(weather.currently)}&deg;</div>\n            <div>{weather.summary}</div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2cFiJ\",\"overlay\":\"App_overlay__13zhU\",\"separator\":\"App_separator__1BYdK\",\"App-logo-spin\":\"App_App-logo-spin__3SESb\"};"],"sourceRoot":""}